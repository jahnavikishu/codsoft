import tkinter as tk
from tkinter import messagebox
import json
import os

TASKS_FILE = 'tasks.json'

class TodoApp:
    def __init__(self, root):
        self.root = root
        self.root.title("To-Do List Application")
        
        self.tasks = self.load_tasks()

        self.frame = tk.Frame(self.root)
        self.frame.pack(pady=10)

        self.task_entry = tk.Entry(self.frame, width=40)
        self.task_entry.pack(side=tk.LEFT, padx=10)

        self.add_button = tk.Button(self.frame, text="Add Task", command=self.add_task)
        self.add_button.pack(side=tk.LEFT)

        self.tasks_listbox = tk.Listbox(self.root, width=50, height=15)
        self.tasks_listbox.pack(pady=10)

        self.update_task_listbox()

        self.tasks_listbox.bind('<Double-1>', self.update_task)
        
    def load_tasks(self):
        if os.path.exists(TASKS_FILE):
            with open(TASKS_FILE, 'r') as file:
                return json.load(file)
        return []

    def save_tasks(self):
        with open(TASKS_FILE, 'w') as file:
            json.dump(self.tasks, file, indent=4)

    def add_task(self):
        description = self.task_entry.get()
        if description:
            task = {'description': description, 'completed': False}
            self.tasks.append(task)
            self.save_tasks()
            self.update_task_listbox()
            self.task_entry.delete(0, tk.END)
        else:
            messagebox.showwarning("Input Error", "Task description cannot be empty")

    def update_task_listbox(self):
        self.tasks_listbox.delete(0, tk.END)
        for task in self.tasks:
            status = "Completed" if task['completed'] else "Pending"
            self.tasks_listbox.insert(tk.END, f"{task['description']} - {status}")

    def update_task(self, event):
        selected_index = self.tasks_listbox.curselection()
        if selected_index:
            index = selected_index[0]
            task = self.tasks[index]
            task['completed'] = not task['completed']
            self.save_tasks()
            self.update_task_listbox()

if __name__ == "__main__":
    root = tk.Tk()
    app = TodoApp(root)
    root.mainloop()
